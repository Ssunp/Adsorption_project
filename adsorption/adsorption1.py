# -*- coding: utf-8 -*-
"""Adsorption1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f0HLwHkSlYbbJyvbovTCVNvuRpod-BaP
"""

#@title Input
import numpy as np

# Constants
R = 8.314  # Universal gas constant, J/(mol·K)
pi=3.14

# Input from the image
F_T = 56055*1000/29  # Total feed flow rate, mol/hr
y_fi = np.array([0.00039, 0.78961, 0.2100, 0.0000])  # Composition of species in the feed
P_f = 1  # Feed pressure (1 bar)
T_f = 298.15  # Feed temperature, K (25 °C)


# Isotherm parameters from the image
q_i_s = np.array([5.63, 5.84, 0, 0])  # mol/kg < Max adsorption
b_i_0 = np.array([8.65e-7, 2.5e-6, 0, 0]) # Langmair Const.
delta_U_i = np.array([-36641, -15800, 0, 0])  # J/mol

# Operating conditions
P_ads = 1 # Adsorption pressure(1 bar)
T_ads = 298.15  # Adsorption temperature, K (25 °C)
P_des = 1  # Desorption pressure (1 bar)
T_des = 313.15  # Desorption temperature, K (40 °C)
P_drop = 0.001 # bar/m

operating_mode ="TSA"

P_gas = 1
T_gas = 298.15

# Design related inputs
rho_s = 1535  # Density of adsorbent, kg/m^3
D_o_limit = 1.0  # Column diameter upper limit, m (1 meter)
L_D_ratio = 5.0  # Column L/D ratio (length/diameter)
epsilon = 0.35  # Bed voidage

#Cycle
cycle_ads=0.5 #hr
cycle_des=0.5 #hr

#Other
Cp_per_Cv = 1.4
efficiency = 0.75
s_heat_capacity = 0.92 #adsorbent heat capacity J/g/K
g_heat_capacity = 1 #gas heat capacity J/mol/K

#@title #Calculation

# Step 1: Calculate concentration of each species at adsorption and desorption conditions
c_i_ads = (y_fi * P_ads*10**5) / (R * T_ads)  # Concentration during adsorption, mol/m^3
c_i_des = (y_fi * P_des*10**5) / (R * T_des)  # Concentration during desorption, mol/m^3

# Step 2: Calculate b_i under adsorption and desorption conditions
b_i_ads = b_i_0 * np.exp(-delta_U_i / (R * T_ads))
b_i_des = b_i_0 * np.exp(-delta_U_i / (R * T_des))

# Step 3: Calculate the amount of gas adsorbed during adsorption
q_i_ads = (q_i_s * b_i_ads * c_i_ads) / (1 + np.sum(b_i_ads * c_i_ads))

# Step 4: Calculate the specific volumetric amount of gas adsorbed/retained
n_i_ads = epsilon * c_i_ads + (1 - epsilon) * rho_s * q_i_ads

# Step 5: Calculate the amount of gas retained after desorption
q_i_des = (q_i_s * b_i_des * c_i_des) / (1 + np.sum(b_i_des * c_i_des))
n_i_des = epsilon * c_i_des + (1 - epsilon) * rho_s * q_i_des

# Step 6: Calculate the working capacity
delta_n_i = n_i_ads - n_i_des

# Step 7: Calculate flow of most-selective gas species
most_seletive = np.zeros_like(b_i_ads)
most_seletive[np.argmax(b_i_ads)]=1
f_k = np.max(most_seletive*y_fi*F_T*cycle_ads)

# Step 8: Calculate required total adsorbent volume
delta_n_k = np.max(most_seletive*delta_n_i)
V_T = f_k/delta_n_k
Total_ads = F_T*cycle_ads

# Step 9: Column sizing
one_column_diameter = (4* V_T/(pi*L_D_ratio))**(1/3)
column_per_train = np.ceil(4* V_T/(pi*L_D_ratio*np.min([one_column_diameter,D_o_limit])**3))
column_diameter = one_column_diameter/column_per_train **(1/3)
column_length = L_D_ratio*column_diameter
adsorbent_amount =  V_T*rho_s

# Step 10 :Calaculations for process performance
nd = delta_n_i *V_T
yd=nd/np.sum(nd)
na =Total_ads*y_fi-nd
ya=na/np.sum(na)
recovery_ads=na/(Total_ads*y_fi+1e-10)
recovery_des=nd/(Total_ads*y_fi+1e-10)

# Step 11: Output part 1
if b_i_ads[0]==np.max(b_i_ads[0]):
  product_withdrawal = "During Desorption"
  product_purity = yd[0]*100
  product_recovery =recovery_des[0]*100
  product_flow_rate =2*sum(nd)/cycle_des
else:
  product_withdrawal = "During Adsorption"
  product_purity = ya[0]*100
  product_recovery =recovery_ads[0]*100
  product_flow_rate =2*sum(na)/cycle_ads


# Step 12: Calculations for energy consumption
feed_compressor_power = (1 / efficiency) * (Total_ads / 3600) * (Cp_per_Cv / (Cp_per_Cv - 1)) * R * (T_f) * (((P_ads + P_drop * column_length) / P_f) ** ((Cp_per_Cv - 1) / Cp_per_Cv) - 1) / 1000
desorption_vacuum_pump = (1 / efficiency) * (sum(nd)/ 3600/cycle_des) * (Cp_per_Cv / (Cp_per_Cv - 1)) * R * (T_des) * ((1/P_des) ** ((Cp_per_Cv - 1) / Cp_per_Cv) - 1) / 1000
product_compressor=(1 / efficiency) * product_flow_rate/3600* (Cp_per_Cv / (Cp_per_Cv - 1)) * R *(273.15+T_gas) * ((P_gas/P_des) ** ((Cp_per_Cv - 1) / Cp_per_Cv) - 1) / 1000
heat_desorption = -delta_U_i *delta_n_i*V_T*(cycle_ads+cycle_des)/3600 ### WHY cycle_ads+cycle_des?
column_heating_duty = (np.sum(heat_desorption)+np.sum(delta_n_i)*V_T/cycle_des/3600*g_heat_capacity*(T_des-T_ads))/1000

# Step 13: Overall Mass Balance
input_Train1_step1 = F_T*y_fi
output_Train1_step1=na /cycle_ads
output_Train1_step2=nd/cycle_des

input_Train2_step2 = F_T*y_fi
output_Train2_step1=output_Train1_step2
output_Train2_step2=output_Train1_step1

# Step 14: Output part 2
no_of_columns = column_per_train*2
column_length=column_length
column_diameter=column_diameter
total_adsorbent = 2* adsorbent_amount
L_D_ratio=L_D_ratio
power=2*(feed_compressor_power+desorption_vacuum_pump +product_compressor)
heat_duty = 2*column_heating_duty
eq_work = (power+0.75*0.9*heat_duty)/(F_T*y_fi[0]/3600)

# Step 15: Adsorption loading
def calculate_solid_loading(temp_celsius, pressure, b_i_0, delta_U_i, R, q_i_s):
    temp_kelvin = temp_celsius + 273.15
    b = b_i_0[0] * np.exp(-delta_U_i[0] / (R * temp_kelvin))
    solid_loading = []
    for p in pressure:
        c = (p * 10**5) / (R * temp_kelvin)  # Why no y_fi[0]
        solid_loading.append(q_i_s[0] * b * c / (1 + b * c))
    return solid_loading

pressure = [0, 0.01] + list(np.arange(0.05, 1.05, 0.05))
solid_loading_25C = calculate_solid_loading(25, pressure, b_i_0, delta_U_i, R, q_i_s)
solid_loading_100C = calculate_solid_loading(100, pressure, b_i_0, delta_U_i, R, q_i_s)

#chemical adsorbtion

#@title #Result 1
from tabulate import tabulate

# Formatting the table
table = [
    ["Operating Mode", operating_mode],
    ["Product withdrawal", product_withdrawal],
    ["Product purity (%)", f"{product_purity:.2f}"],
    ["Product recovery (%)", f"{product_recovery:.2f}"],
    ["Product flow rate (mol/hr)", f"{product_flow_rate:.2f}"],
    ["", ""],
    ["Column sizing", ""],
    ["No of columns", no_of_columns],
    ["Column Length", f"{column_length:.2f} m"],
    ["Column Diameter", f"{column_diameter:.2f} m"],
    ["Total adsorbent", f"{total_adsorbent:.2f} kg"],
    ["L/D ratio", f"{L_D_ratio:.2f}"],
    ["", ""],
    ["Utilities", ""],
    ["Power", f"{power:.2f} kW"],
    ["Heat duty", f"{heat_duty:.5f} kW"],
    ["Eq. Work", f"{eq_work:.2f} kJ/mol product"]
]

# Print the table
print(tabulate(table, tablefmt="fancy_grid", colalign=("left", "right")))

#@title #Result 2
import matplotlib.pyplot as plt

# Plotting the data
plt.figure(figsize=(8, 6))

plt.plot(pressure, solid_loading_25C, 'o-', color='blue', label='T = 25 deg. C')
plt.plot(pressure, solid_loading_100C, 'o-', color='orange', label='T = 100 deg. C')

# Adding labels and title
plt.xlabel('Pressure (bar)')
plt.ylabel('Adsorption loading, (mol/kg)')
plt.legend(loc='best')
plt.grid(True)

# Displaying the plot
plt.show()